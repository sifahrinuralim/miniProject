{"version":3,"sources":["Checkbox.web.tsx"],"names":["Checkbox","ref","icon","wrapperRef","props","formControlContext","checkboxGroupContext","React","useContext","CheckboxGroupContext","_interactionBox","_iterationBoxHover","_hover","_iterationBoxFocus","_focus","_iterationBoxDisabled","_disabled","_checkbox","_checkboxChecked","_checked","_checkboxDisabled","_checkboxInvalid","_invalid","_icon","isInvalid","themedProps","_ref","useRef","mergedRef","state","defaultSelected","defaultIsChecked","isSelected","isChecked","groupState","isHovered","accessibilityLabel","value","inputProps","checked","disabled","sizedIcon","cloneElement","children","focusProps","isFocusVisible","component","transition"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { mergeRefs } from './../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CheckIcon } from '../Icon/Icons';\n\nconst Checkbox = ({ icon, wrapperRef, ...props }: ICheckboxProps, ref: any) => {\n  const formControlContext = useFormControlContext();\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const {\n    _interactionBox: {\n      _hover: _iterationBoxHover,\n      _focus: _iterationBoxFocus,\n      _disabled: _iterationBoxDisabled,\n      ..._interactionBox\n    },\n    _checkbox: {\n      _checked: _checkboxChecked,\n      _disabled: _checkboxDisabled,\n      _invalid: _checkboxInvalid,\n      ..._checkbox\n    },\n    _icon,\n    isInvalid,\n    ...themedProps\n  } = usePropsResolution('Checkbox', {\n    ...checkboxGroupContext,\n    ...formControlContext,\n    ...props,\n  });\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n  const groupState = useContext(CheckboxGroupContext);\n  const { isHovered } = useHover({}, _ref);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps } = groupState\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...themedProps,\n          'aria-label': themedProps.accessibilityLabel,\n          'value': themedProps.value,\n        },\n        groupState.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        { ...themedProps, 'aria-label': themedProps.accessibilityLabel },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  const { checked, disabled } = inputProps;\n\n  const sizedIcon = icon\n    ? () =>\n        React.cloneElement(\n          icon,\n          {\n            ..._icon,\n          },\n          icon.props.children\n        )\n    : null;\n  const { focusProps, isFocusVisible } = useFocusRing();\n\n  const component = (\n    <Box\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      {...themedProps}\n      opacity={disabled ? 0.4 : 1}\n      cursor={disabled ? 'not-allowed' : 'pointer'}\n    >\n      <Center>\n        {/* Interaction Box */}\n        <Box\n          {..._interactionBox}\n          {...(isFocusVisible && _iterationBoxFocus)}\n          {...(isHovered && _iterationBoxHover)}\n          {...(disabled && _iterationBoxDisabled)}\n          {...(disabled && _iterationBoxDisabled)}\n          style={{\n            // @ts-ignore - only for web\"\n            transition: 'height 200ms, width 200ms',\n          }}\n          h={isFocusVisible || isHovered ? '200%' : '100%'}\n          w={isFocusVisible || isHovered ? '200%' : '100%'}\n          zIndex={-1}\n        />\n        {/* Checkbox */}\n        <Center\n          {..._checkbox}\n          {...(checked && _checkboxChecked)}\n          {...(disabled && _checkboxDisabled)}\n          {...(isInvalid && _checkboxInvalid)}\n        >\n          {icon && sizedIcon && checked ? (\n            sizedIcon()\n          ) : (\n            <CheckIcon name=\"check\" {..._icon} opacity={checked ? 1 : 0} />\n          )}\n        </Center>\n      </Center>\n      {props.children}\n    </Box>\n  );\n\n  return (\n    <Box\n      // @ts-ignore - RN web supports accessibilityRole=\"label\"\n      accessibilityRole=\"label\"\n      ref={mergeRefs([wrapperRef, _ref])}\n    >\n      <VisuallyHidden>\n        <input {...inputProps} {...focusProps} ref={mergedRef} />\n      </VisuallyHidden>\n\n      {component}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Checkbox));\n"]}